/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package colorchooser;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;

/**
 *
 * Honestly, all three of us had a role in this form at some point in the dev
 * process. Ryan did have to integrate all components here and separate out the
 * sliders from the text fields because they were originally glued together and
 * synced with Netbeans binding (Rich's version), which caused too many issues
 * and that didn't work on everybody's computer. Ryan figured out how to make it
 * all play nice with manual action, event, and doc listeners instead. Ben had a
 * version of the form that worked with his test component. Ryan had the idea of
 * converting most panels in the JFrame to grid layout to make it easier to work
 * with.
 */
public class JColorChooser extends javax.swing.JFrame implements ColorListener, ActionListener {

    private Color color = Color.BLACK;//Default color is black.

    /**
     * Creates new form JColorChooser
     */
    public JColorChooser() {
        initComponents();
        //COLLEGE LEVEL WORK!!!!!
        //Listeners for the color chooser (sliders) component.
        colorChooser.addColorListener(colorTextPanel);
        colorChooser.addColorListener(colorCanvas);
        colorChooser.addColorListener(lblHexColor);
        colorChooser.addColorListener(this);
        //Listeners for the color text panel (integer text fields) component.
        colorTextPanel.addColorListener(colorChooser);
        colorTextPanel.addColorListener(colorCanvas);
        colorTextPanel.addColorListener(lblHexColor);
        colorTextPanel.addColorListener(this);
        //Listener for the button.
        btnChangeColor.addActionListener(this);
    }

    //Add 2 color listeners (sliders and text fields) to the vector collection.
    public void addColorListener(ColorListener colorListener) {
        colorChooser.addColorListener(colorListener);
        colorTextPanel.addColorListener(colorListener);
    }

    //Remove 2 color listeners (sliders and text fields) from the vector collection.
    public void removeColorListener(ColorListener colorListener) {
        colorChooser.removeColorListener(colorListener);
        colorTextPanel.removeColorListener(colorListener);
    }

    //Fire the color events for the slider and the text fields at the same time. This is the "magic" of how to keep them in sync without using binding which isn't included in newer Netbeans.
    public JColorChooser(Color color) {
        this();
        this.color = color;
        colorChooser.fireColorEvent();
        colorTextPanel.fireColorEvent();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        colorTextPanel = new colorchooser.ColorTextPanel();
        colorChooser = new colorchooser.ColorChooser();
        jPanel2 = new javax.swing.JPanel();
        colorCanvas = new colorchooser.ColorCanvas();
        jPanel3 = new javax.swing.JPanel();
        lblHexColor = new colorchooser.HexColorCodeLabel();
        btnChangeColor = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Color Chooser");

        jPanel1.setLayout(new java.awt.GridLayout(1, 1));
        jPanel1.add(colorTextPanel);
        jPanel1.add(colorChooser);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        javax.swing.GroupLayout colorCanvasLayout = new javax.swing.GroupLayout(colorCanvas);
        colorCanvas.setLayout(colorCanvasLayout);
        colorCanvasLayout.setHorizontalGroup(
            colorCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 562, Short.MAX_VALUE)
        );
        colorCanvasLayout.setVerticalGroup(
            colorCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 209, Short.MAX_VALUE)
        );

        jPanel2.add(colorCanvas);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel3.setLayout(new java.awt.GridLayout(1, 1));
        jPanel3.add(lblHexColor);

        btnChangeColor.setText("Change Color");
        btnChangeColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeColorActionPerformed(evt);
            }
        });
        jPanel3.add(btnChangeColor);

        getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnChangeColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeColorActionPerformed
        // When the change color button is pressed, it grabs the background color of the canvas and sets the color variable which is shared with the test component and disposes the window.
        color = colorCanvas.getBackground();
        setColor();
        this.dispose();
    }//GEN-LAST:event_btnChangeColorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JColorChooser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JColorChooser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JColorChooser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JColorChooser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JColorChooser().setVisible(true);
            }
        });
    }

    //Returns the current color value as an integer.
    public Color getColor() {
        return color;
    }

    //Sets the current color as an integer. This method helps the test class work.
    public void setColor() {
        this.color = color;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChangeColor;
    private colorchooser.ColorCanvas colorCanvas;
    private colorchooser.ColorChooser colorChooser;
    private colorchooser.ColorTextPanel colorTextPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private colorchooser.HexColorCodeLabel lblHexColor;
    // End of variables declaration//GEN-END:variables

    @Override
    //Upon changing the color value, update the color variable. If the component is not empty, update the foreground color.
    public void changeColor(ColorEvent ce) {
        this.color = ce.getColor();
    }

    @Override
    //Hides the window when an action is performed. Don't know if this does anything different than the change color button.
    public void actionPerformed(ActionEvent e) {
        setVisible(false);
    }
}
